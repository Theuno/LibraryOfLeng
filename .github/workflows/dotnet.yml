# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test --no-build --verbosity normal

      # Run dotnet build and publish
      - name: dotnet build and publish
        run: |
          cd Leng.BlazorServer
          dotnet build --configuration Release
          dotnet publish -c Release -o './Output'
          cd ../Leng.Function.MtgJsonToDb
          dotnet build --configuration Release
          dotnet publish -c Release -o './Output'
      # Run dotnet tests
      - name: dotnet test
        run: |
          cd Leng.ApplicationTests
          dotnet test
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Install SonarCloud scanners
        run: |
          dotnet tool install --global dotnet-sonarscanner
      - name: Install dotnet-coverage
        run: |
          dotnet tool install --global dotnet-coverage
      - name: Install xmldocmd
        run: |
          dotnet tool install --global xmldocmd
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet clean Leng.sln
          dotnet-sonarscanner begin /k:"Theuno_LibraryOfLeng2" /o:"theuno" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet build --no-restore --no-incremental
          dotnet-coverage collect 'dotnet test' -f xml -o 'coverage.xml'
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Publish LengFunctionMtgJsonToDb
        uses: Azure/functions-action@v1
        with:
          app-name: libraryofleng-function
          package: ./Leng.Function.MtgJsonToDb/Output
      - name: Publish LengBlazorServer
        uses: Azure/webapps-deploy@v2
        with:
          app-name: libraryofleng-web
          package: ./Leng.BlazorServer/Output